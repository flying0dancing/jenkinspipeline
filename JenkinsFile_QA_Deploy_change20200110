#!groovy
@Library('pipeline-libs') 

stage('setup'){
    node{
        loadLocalSteps()
    }
}
private void loadLocalSteps(){
    library identifier: 'ci-script@awsTest', 
            retriever: modernSCM([
                $class: 'GitSCMSource', 
                credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', 
                id: 'a58b1061-f557-46f6-ba36-b53cfdb77d43', 
                remote: 'ssh://git@bitbucket.lombardrisk.com:7999/cprod/ci-script.git', 
                traits: [[$class: 'BranchDiscoveryTrait']]])
}
pipeline{
    agent { label 'PRODUCT-CI-SHA-LOCAL1' }
    stages{
        stage("parallel test"){
            steps{
                checkoutTestARProduct('test-hkma','hkma','feature/ci')
                testParallel('hkma')
                
            }
        }
    }
}

String createDisplayHeadline(String content,String headsize){
	return updateBuild("""<h${headsize} style='margin-bottom:5px'>${content}</h${headsize}>""")
}
String createDisplayStartOl(){
	return updateBuild(""" <ol> """)
}
String createDisplayStepline(String content){
	return updateBuild(""" <li>${content}</li> """)
}
String createDisplayEndOl(){
	return updateBuild(""" </ol> """)
}
def updateBuild(htmlStr){
    currentBuild.description=(currentBuild.description?currentBuild.description:'')+htmlStr
}
def testParallel(projectFolder){
    def branches=[:]
    MAX_CONCURRENT = 2
    //create a fifo
    latch = new java.util.concurrent.LinkedBlockingDeque(MAX_CONCURRENT)
    //put resource in fifo
    for(int i=0; i<MAX_CONCURRENT; i++)
    {latch.offer("$i")}
    //def job_list = ["test1","test2","test3","test4","test5","test6"]
    def job_list=getSubFolders(projectFolder)
                    
    for(int i=0; i<job_list.size(); i++) {
        def name = job_list[i]
        branches[name] = {
            def thing = null
            waitUntil {
                thing = latch.pollFirst();
                return thing != null;
            }
            try {
                //execute job
                //build(job: name, propagate: false)
                echoName(name)
				//TODO backup environment and database
                installersJson(projectFolder,name)
				//TODO clean downloadPath
            }finally {
                //release a resource
                latch.offer(thing)
            }
        }
    }
    parallel branches
}


def echoName(String name){
    echo "execute: ${name}......."
}

void checkoutTestARProduct(repoFolder,projectFolder,branch){
    checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "${projectFolder}"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: "ssh://git@bitbucket.lombardrisk.com:7999/cprod/${repoFolder}.git"]]])
}

def getSubFolders(projectFolder){
    def allFolders=[]
    dir(projectFolder+'/src/main/resources'){
        allFolders=sh(returnStdout: true, script: '''ls -l|grep "^d"|awk '{ print $NF }' ''').trim().split()
        echo "all subfolders: ${allFolders}"
    }
    allFolders=getValidFolders(allFolders)
    
    return allFolders
}

def getValidFolders(folders){
    def allFolders=[]
    for(int i=0;i<folders.size();i++){
        if(findFiles(glob: '**/'+folders[i]+'/deployment.json')){
            allFolders+=folders[i]
        }
    }
    echo "valid folders: ${allFolders}"
    return allFolders
}

def copyScripts(propertiesSet){
	def app_hostuser=propertiesSet['app.user']+'@'+propertiesSet['app.host']
	def downloadPath='/home/'+propertiesSet['app.user']+'/'
	sh( returnStatus: true, script: '''scp scripts/Remote*.sh '''+app_hostuser+''':'''+downloadPath)
	sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'chmod u+x Remote*.sh ' ''')
}
def installersJson(projectFolder,deployFolder){
	
    def jsonFileName='deployment.json'
    def propertiesFileName='env.properties'
	def files=findFiles(glob: '**/'+projectFolder+'/**/'+deployFolder+'/'+jsonFileName)
    def propertiesFiles=findFiles(glob: '**/'+projectFolder+'/**/'+deployFolder+'/'+propertiesFileName)
    def propertiesSet=readProperties file: propertiesFiles[0]
	def gado
	def installers
	def installOcelotPath
	def installPrefix
	gado=readJSON file: files[0].path
		installers=gado.installers
		if(installers){
			copyScripts(propertiesSet)
			createDisplayHeadline('Install Ocelot and Products','3')
			for(int i=0;i<installers.size();i++){
				installPrefix=installers[i].prefix
				
                if(installPrefix.equalsIgnoreCase('AgileREPORTER')){
					installers[i].prefix='AgileREPORTER'
					findAROcelot(installers[i],projectFolder,propertiesSet)
				}else{
					findARProduct(installers[i],projectFolder,propertiesSet)
				}
					
			}
		}else{
			error "canot found intsall products in gado.json"
		}
	
}



def findAROcelot(ocelotInstaller,projectFolder,propertiesSet){
    def installVer=ocelotInstaller.version
	createDisplayHeadline(' * ['+ocelotInstaller.prefix+', '+installVer+']','4')
	createDisplayStartOl()
    if(!ocelotInstaller.needInstall || !ocelotInstaller.needInstall.equalsIgnoreCase("no")){
		echo 'install '+ocelotInstaller.prefix+'...'
        def downloadFileFullName=searchInstaller.searchLatestOcelot(propertiesSet,ocelotInstaller.prefix,helper.getInstallerMainVersion(installVer),helper.getInstallerBuildNumber(installVer))
		def downloadFileName=helper.getFileName(downloadFileFullName)
		if(downloadFileName){
			//InstallerCheck and installOcelot
			def flag=searchInstaller.remoteInstallercheck(propertiesSet,downloadFileName)
			if(flag==0){
				createDisplayStepline('install ocelot: '+downloadFileName)
				def props=ocelotInstaller.props
				if(props){
					echo props[0].filename
					opAROcelot(projectFolder,propertiesSet,downloadFileFullName,downloadFileName,props[0].filename)
				}
			}else{
				echo "no need to install ["+ocelotInstaller.prefix+", "+installVer+" ]"
				createDisplayStepline('install ocelot: no need, skip')
			}
		}else{
			echo "cannot find install ocelot["+ocelotInstaller.prefix+", "+installVer+" ]"
			createDisplayStepline('install ocelot: cannot find, skip')
		}
		
	}else{
		echo "no need to install ["+ocelotInstaller.prefix+", "+installVer+" ]"
		createDisplayStepline('install ocelot: no need, skip')
	}
	createDisplayEndOl()
}

def findARProduct(productInstaller,projectFolder,propertiesSet){
    def installVer=productInstaller.version
    def buildNumber=helper.getInstallerBuildNumber(installVer)
	def downloadFileFullName
    def downloadFileName
	createDisplayHeadline(' * ['+productInstaller.prefix+', '+installVer+']','4')
	createDisplayStartOl()
    if(!productInstaller.needInstall || !productInstaller.needInstall.equalsIgnoreCase("no")){
		echo 'install Product '+productInstaller.prefix+'...'
		installVer=helper.getInstallerMainVersion(installVer)
        downloadFileFullName=searchInstaller.searchLatestProduct(projectFolder,propertiesSet,productInstaller.prefix.toUpperCase(),installVer,buildNumber)
		downloadFileName=helper.getFileName(downloadFileFullName)
		if(downloadFileName){
			def flag=searchInstaller.remoteInstallercheck(propertiesSet,downloadFileName)
			if(flag==0){
				createDisplayStepline('install product: '+downloadFileName)
				installARProduct(projectFolder,propertiesSet,downloadFileFullName,downloadFileName)
			}else{
				echo "no need to install product ["+productInstaller.prefix+", "+installVer+" ]"
				createDisplayStepline('install product: no need, skip')
			}
		}else{
			echo "cannot find install product ["+productInstaller.prefix+", "+installVer+" ]"
			createDisplayStepline('install product: cannot find, skip')
		}
		
		
	}else{
		echo "no need to install product ["+productInstaller.prefix+", "+installVer+" ]"
		createDisplayStepline('install product: no need, skip')
	}
    
    buildNumber=helper.getInstallerRealBuildNumber(downloadFileName,buildNumber)
    def props=productInstaller.props
	if(props){
		for(int j=0;j<props.size();j++){
			echo "=================================config index[${j}]============================================"
			if(!props[j].needConfig || !props[j].needConfig.equalsIgnoreCase("no")){
				def eaFlag='1'
                if(props[j].REPORTERMetadata.equalsIgnoreCase("yes")){
                    echo "config REPORTER metadata ${props[j]}"
					createDisplayStepline('config '+props[j])
                }else{
                    echo "config PRODUCT ${props[j]}"
					createDisplayStepline('config '+props[j])
					eaFlag='2'
                }
				linkARprojectDID(projectFolder,propertiesSet,productInstaller.prefix,installVer+'-'+buildNumber,props[j].filename,props[j].aliases,eaFlag)
            }else{
                echo "no need to config ${props[j]}"
				createDisplayStepline('config '+props[j]+': no need, skip')
            }
		}
	}

	createDisplayEndOl()
						
}



/***
*install arproduct packages part, if RemoteInstall_0.tmp contains fail, it will terminate.
* @projectFolder like hkma, mas
* @propertiesFileFullName: test.properties, get property local.linux local.oracle ar.repo.linux from it
* @downloadFileName like CE_DPB_v1.0.0-b9_sign.lrm under <projectFolder>/candidate-release/<productVersionFolder>/
* @downloadFromLocalServer: null means download from remote
* @ocelotPath: install path
*/
void installARProduct(projectFolder,propertiesSet,installerFullName,installerName){
	def local_linux=propertiesSet['app.host']
	def app_user=propertiesSet['app.user']
	
	def stepInfo='download product package'
	def app_hostuser=app_user+'@'+local_linux
	def ocelotPath=propertiesSet['app.install.path']
	def downloadPath=ocelotPath+'/deploys/'

	//create download folder deploys
	sh( returnStatus: true, script: '''ssh '''+app_hostuser+''' 'mkdir '''+downloadPath+''' 2>/dev/null ' ''')
	if(installerFullName && installerFullName.contains('/')){
		//download from local server
		createDisplayStepline(stepInfo+' from local')
	}else{
		createDisplayStepline(stepInfo+' from remote')
		downloadInstaller.downloadARProduct(projectFolder,propertiesSet,installerName,downloadPath)
		installerFullName=downloadPath+installerName
	}
	sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh -help' ''')
	//sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh '''+ocelotPath+''' 1 '''+installerFullName+''' ' ''')
	def allstatus=sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'cat '''+ocelotPath+'''/RemoteInstall_1.tmp ' ''').trim()
	if(allstatus){
		createDisplayStepline(allstatus)
		if(allstatus.contains('fail')){
			createDisplayEndOl()
			error "install or upgrade product contains fail."
		}else{
			echo "install or upgrade product pass."
		}
	}
}



/***
*config DID part, arguments: projectName, productPrefix, DID's properties's name suffix like 'aliasinfo.properties' 
* @projectFolder like hkma, mas
* @propertiesFileFullName: test.properties, get property local.linux local.oracle ar.repo.linux from it
* @productPrefix like CE_DPB_v1.0.0-b9_sign.lrm's CE_DPB
* @productVersion like CE_DPB_v1.0.0-b9_sign.lrm's 1.0.0-b9
* @productPropFileName: ce config properties
* @productPropAliases: like "STB Work:STB System:STB System HKMA"
* @eaFlag: 1 means config argument is -ea, 2 means config argument is -da and -aa
*/
def linkARprojectDID(projectFolder,propertiesSet,productPrefix,productVersion,productPropFileName,productPropAliases,eaFlag){
	def continue_status1='RemoteInstall_'+eaFlag+'.tmp'
	def local_linux=propertiesSet['app.host']
	def app_user=propertiesSet['app.user']
	def app_hostuser=app_user+'@'+local_linux
	def ocelotPath=propertiesSet['app.install.path']
	def downloadPath=ocelotPath+'/bin/'
	
	//copy aliasinfo.properties to local ocelot folder
	stepInfo='find and copy '+productPropFileName
	flag=sh( returnStatus: true, script: '''scp `find '''+env.WORKSPACE+'''/'''+projectFolder+'''/src/main/resources/properties/ -type f -name "'''+productPropFileName+'''"` '''+app_hostuser+''':'''+downloadPath)
	if(flag==0){
		createDisplayStepline(stepInfo+' pass')
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh '''+ocelotPath+''' '''+eaFlag+''' '''+productPropFileName+''' '''+productPrefix.toUpperCase()+''' '''+ productVersion+''' \"'''+productPropAliases+'''\" ' ''')
		def allstatus=sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'cat '''+ocelotPath+'''/'''+continue_status1+''' ' ''').trim()
		if(allstatus){
			createDisplayStepline('config DID: '+allstatus.replaceAll('configure','<br />configure'))
			if(allstatus.contains('fail')){
				createDisplayEndOl()
				error "config properties contains fail."
			}else{
				echo "config properties pass."
			}
		}
	}else{
		createDisplayStepline(stepInfo+' fail')
		createDisplayEndOl()
		error "fail to copy properties file from slave"
	}
	
}


/***
*new install or upgrade ar platform part, use @ocelotPropFileName ocelot.user.password= to judged new install or upgrade
* @projectFolder like hkma, mas
* @propertiesFileFullName: env.properties, get property app.host app.user default.use.repo database.driver database.host database.user ar.local.repo from it
* @installerName: like AgileREPORTER-19.3.0-b207.jar
* @ocelotPropFileName: ocelot properties's name like 'hkma_upgrade_ocelot.properties' 'hkma_new_ocelot.properties'
*/
void opAROcelot(projectFolder,propertiesSet,installerFullName,installerName,ocelotPropFileName){
	def local_linux=propertiesSet['app.host']
	def app_user=propertiesSet['app.user']

	def app_hostuser=app_user+'@'+local_linux
	def ocelotPath=propertiesSet['app.install.path']
	def downloadPath=ocelotPath+'/deploys/'

	//transfer ocelot properties to workspace for getting properties
	def ocelotPropFilePath=env.WORKSPACE+'/'+projectFolder+'/src/main/resources/properties/'
	def ocelotProps=readProperties file: ocelotPropFilePath+ocelotPropFileName
	def ocleot_user_password=ocelotProps['ocelot.user.password']
	//def ocelotPath=getAROcelotProperty(ocelotPropFileName,'ocelot.install.path')
	sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'mkdir '''+downloadPath+''' 2>/dev/null ' ''')
	if(ocleot_user_password){
		createDisplayStepline('new install')
		echo "new install agile reporter platform"
		def dbserver_hostuser=propertiesSet['database.user']+'@'+propertiesSet['database.host']
		def local_dbname=ocelotProps['ocelot.jdbc.username']
		def local_dbinstance=ocelotProps['ocelot.jdbc.url']
		def jdbcurlarr=local_dbinstance.split(':')
		local_dbinstance=jdbcurlarr[-1]
		echo "create oracle database"
		createDisplayStepline('create oracle database')
		sh( returnStatus: true, script: '''ssh '''+dbserver_hostuser+'''  './opSchema.sh '''+local_dbinstance+''' '''+local_dbname+''' ' ''')
		
		createDisplayStepline('create ocelot install path')
		echo "create ocelot install path"
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'rm -rf '''+ocelotPath+''' ' ''')
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'mkdir '''+ocelotPath+''' ' ''')
	}else{
		echo "upgrade agile reporter platform"
		createDisplayStepline('upgrade install')
	}


	//copy ocelot.properties to local ocelot folder
	def stepInfo='find and copy '+ocelotPropFileName
	def flag=sh( returnStatus: true, script: '''scp `find '''+env.WORKSPACE+'''/'''+projectFolder+'''/src/main/resources/properties/ -type f -name "'''+ocelotPropFileName+'''"` '''+app_hostuser+''':'''+downloadPath)
	if(flag==0){
		createDisplayStepline(stepInfo+' pass')
		stepInfo='download ocelot '
		if(installerFullName && installerFullName.contains('/')){
			createDisplayStepline(stepInfo+'from local')
		}else{
			//download from remote server
			createDisplayStepline(stepInfo+'from remote')
			downloadInstaller.downloadOcelot(propertiesSet,installerName,downloadPath)
			installerFullName=downloadPath+installerName
		}
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh -help' ''')
		//sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh '''+ocelotPath+''' 0 '''+installerFullName+''' '''+downloadPath+ocelotPropFileName+''' ' ''')
		def allstatus=sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'cat '''+ocelotPath+'''/RemoteInstall_0.tmp ' ''').trim()
		if(allstatus){
			createDisplayStepline(allstatus)
			if(allstatus.contains('fail')){
				createDisplayEndOl()
				error "install or upgrade ocelot contains fail."
			}else{
				echo "install or upgrade ocelot pass."
			}
		}
	}else{
		createDisplayStepline(stepInfo+' fail')
		createDisplayEndOl()
		error "fail to copy properties file from slave"
	}
	
}