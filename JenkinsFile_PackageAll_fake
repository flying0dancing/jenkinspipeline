#!groovy
import hudson.model.*;
ARProject_Prefix=getprojectFolder(env.JOB_NAME)
ARProject_Properties='package.properties'
ARProduct_Manifest='/src/manifest.xml'

server = Artifactory.server '-2131115395@1455437299997'
rtMaven = Artifactory.newMavenBuild()
rtMaven.tool = 'mvn-3.3.9' // Tool name from Jenkins configuration
rtMaven.deployer( releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server)
rtMaven.resolver( releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server)
rtMaven.deployer.deployArtifacts = false // Disable artifacts deployment during Maven run
buildInfo = Artifactory.newBuildInfo()

pipeline {
    agent { label 'PRODUCT-CI-TEST' }
    options {
        timeout(time: 60, unit: 'MINUTES') 
    }
    
    stages {
        stage('checkout'){
			steps{
				echo "start job ${JOB_URL}"
				echo "branch number: ${env.BUILD_NUMBER}"
				checkoutARProduct('mas')
			}
		}
		stage('validate'){
			steps{
				echo "validate metadata before package product config"
			}
		}
		stage('build package'){
			steps{
				echo "build all packages"
				//packageARProduct('mas','b2')
			}
		}
		stage('upload package'){
           steps{
			   echo "upload all packages"
			   //uploadARProduct('mas','b2')
			} 
        }
		
    }
	post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
			//updateBuild(ARProject_Prefix,'b'+env.BUILD_NUMBER)
			triggerOtherJob('mas','b43')
			
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}

void updateBuild(projectFolder, buildnumber){
	def productVersion=getProductVersionFolder(projectFolder)
	def packageSection = createPackagesSection(projectFolder, productVersion,buildnumber)
	currentBuild.displayName=productVersion+'-b'+env.BUILD_NUMBER
	currentBuild.description = """
		$packageSection
    """
}

def createPackagesSection(projectFolder, productVersion, buildnumber) {
	def bucketName=getSomeProperties(projectFolder,'s3.bucket')
	def s3repo='arproduct/'+projectFolder+'/CandidateReleases/'+productVersion
	def downloadlink=''
	def packageLinksRows=''
	def displaylink=''
	def downfiles
	withAWS(credentials: 'aws') {
		downfiles=s3FindFiles(bucket:bucketName, path:s3repo, glob:"**/*$buildnumber*")
	}
    downfiles.each{print "${it.name},${it.path},${it.length},${it.lastModified}"}
	for(int index=0;index<downfiles.size();index++){
	    downloadlink=createLink(bucketName,s3repo,downfiles[index].path,downfiles[index].name)
	    if(downfiles[index].name.toLowerCase().startsWith(projectFolder.toLowerCase())){
	        displaylink=displaylink+"""<h4 style='margin: 3px 0'>$downloadlink</h4>&#x000A;&#x000D;"""
	    }
		packageLinksRows=packageLinksRows+
			"""<tr>
                <td>${downfiles[index].name}</td>
                <td>$downloadlink</td>
            </tr>"""
	}
    
    return displaylink+convertToTable(
            description: 'Packages',
            firstColumn: 'Package Name', secondColumn: 'Download Link',
            rows: packageLinksRows
    )
}

String createLink(bucketName,s3repo,downloadpath,downloadname){
    def rootUrl="https://s3-eu-west-1.amazonaws.com"
    return """<a href = '$rootUrl/$bucketName/$s3repo/${downloadpath}' title = 'Download [${downloadname}] from the [$bucketName] S3 bucket'>${downloadpath}</a>"""
}

def convertToTable(Map args) {
    return """
        <h3 style='margin-bottom:5px'>${args.description}:</h3>
        <table class='pane stripped-odd bigtable' style='text-align: left'>
            <thead>
                <tr>
                    <th class='pane-header' style='width:40%'>${args.firstColumn}</th>
                    <th class='pane-header' style='width:30%'>${args.secondColumn}</th>
                </tr>
            </thead>
            <tbody>
                ${args.rows}
            </tbody>
        </table>"""
}

String getSomeProperties(projectFolder,keystr){
	def files =findFiles(glob: '**/'+projectFolder+'/'+ARProject_Properties)
	def returnValue=''
	def props
	for(int index=0;index<files.size();index++){
		props = readProperties interpolate: true, file: files[index].path
		props.each{
			if(it.key==keystr){
				//println(it.key + " = " + it.value)
				returnValue=it.value
				return returnValue
			}
		}
	}
	return returnValue
}

def getExternalProjsFromJson(projectFolder){
	def files =findFiles(glob: '**/'+projectFolder+'/**/testudo.json')
	def returnArr=[]
	def cisettings
	def zipset
	def externalProjs
	for(int index=0;index<files.size();index++){
		cisettings = readJSON file: files[index].path
		for(int i=0;i<cisettings.size();i++){
			zipset=cisettings[i].zipSettings
			if(zipset){
			    //println(zipset)
				externalProjs=zipset.externalProjects
				if(externalProjs){
					for(int j=0;j<externalProjs.size();j++){
						def flag=returnArr.find{it->it==externalProjs[j].project}
						//println("${externalProjs[j].project}")
						if(!flag){
							returnArr+=externalProjs[j].project
						}
						
				 	}
				}
				
			}
			
		}
	}
	println "external projects:${returnArr}"
	return returnArr
}

String getprojectFolder(jobName){
    return jobName[0..jobName.indexOf("_")-1]
}

String getProductVersionFolder(projectName){
    def version_APRroduct_Pacakge = sh (
        script: '''awk -F '[<>]' /implementationVersion/'{print $3}' '''+projectName+'''/'''+projectName+ARProduct_Manifest,
        returnStdout: true
        ).trim()
	def versionPattern='(\\d+\\.){2,}\\d+'
	def versionMatcher=(version_APRroduct_Pacakge=~versionPattern)
	versionMatcher.matches()
	assert version_APRroduct_Pacakge=~versionPattern
	version_APRroduct_Pacakge=''+versionMatcher[0][0]
	versionMatcher=null
    echo "main version of ar product package: ${version_APRroduct_Pacakge}"
	return version_APRroduct_Pacakge
}

String getVersionOfARProductFromManifest(manifestFullPath){
    def version_APRroduct_Pacakge = sh (
        script: '''awk -F '[<>]' /implementationVersion/'{print $3}' '''+manifestFullPath,
        returnStdout: true
        ).trim()
    echo "version of ar product pacakge: ${version_APRroduct_Pacakge}"
	return version_APRroduct_Pacakge
}

void checkoutARProduct(projectFolder){
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "${projectFolder}"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: "ssh://git@bitbucket.lombardrisk.com:7999/cprod/${projectFolder}.git"]]])
           
	def externalProjs=getExternalProjsFromJson(projectFolder)
	if(externalProjs){
		for(int i=0;i<externalProjs.size();i++){
			checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "${projectFolder}xbrl"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: "ssh://git@bitbucket.lombardrisk.com:7999/cprod/${externalProjs[i]}.git"]]])
		}
	}
}

/**
* package all products in projectFolder, packageBuildNumber like b1,b2,b3...,b290,..
*/
void packageARProduct(projectFolder,packageBuildNumber){
    def productVersionFolder
    dir(projectFolder){
      rtMaven.run pom: 'pom.xml', goals: 'clean package -U -DskipITs -DskipTests -Dproduct.build.number='+packageBuildNumber, buildInfo: buildInfo
    }
}


def uploadARProduct(projectFolder,packageBuildNumber){
    def productVersionFolder=getProductVersionFolder(projectFolder)
	def s3_bucket=getSomeProperties(projectFolder,'s3.bucket')
	def local_linux=getSomeProperties(projectFolder,'local.linux')
	def arproduct_repo_linux=getSomeProperties(projectFolder,'arproduct.repo.linux')+projectFolder+'/candidate-release/'
	def manifestFiles = findFiles(glob: '**/'+projectFolder+'/*/target/**'+ARProduct_Manifest)
	productVersionFolder=productVersionFolder+'/'+packageBuildNumber
	def returnAllFiles=''
	if(manifestFiles){
		for(int festIndex=0;festIndex<manifestFiles.size();festIndex++){
		    def productPath=manifestFiles[festIndex].path.replaceAll(ARProduct_Manifest,'')
			echo "product package path: "+productPath.replaceAll('/src','')
			def version_APRroduct_Pacakge=getVersionOfARProductFromManifest(manifestFiles[festIndex].path)
			def files = findFiles(glob: productPath+'/*'+version_APRroduct_Pacakge+'*') 
			if(local_linux){
				sh( returnStatus: true, script: '''ssh '''+local_linux+'''  'mkdir -p '''+arproduct_repo_linux+productVersionFolder+'''' ''')
				for(int index=0;index<files.size();index++){
	            	echo "transfer ${files[index].name} to folder $productVersionFolder"
	            	def fileExisted=sh(returnStdout: true, script: '''ssh '''+local_linux+''' '[ -e '''+arproduct_repo_linux+productVersionFolder+'/'+files[index].name+''' ]; echo $?' ''').trim()
	            	if(fileExisted=='0'){
	                	echo "Agile Reporter Product Package already exists.No need to download again."
	            	}else{
	                	sh( returnStatus: true, script: 'scp '+files[index].path+' '+local_linux+':'+arproduct_repo_linux+productVersionFolder+'/'+files[index].name)
	            	}
	        	}
			}
			files.each{returnAllFiles=returnAllFiles+it.name+':'}
			
			//files.each{returnAllFiles.put(it.path,"arproduct/${projectFolder}/CandidateReleases/${productVersionFolder}/${it.name}")}
	        /*withAWS(credentials: 'aws') {
                files.each{s3Upload( bucket:s3_bucket, path:"arproduct/${projectFolder}/CandidateReleases/${productVersionFolder}/${it.name}",includePathPattern:"${it.path}")}
            }*/
			println returnAllFiles
		}
	}else{
	    error "there is no packages, generated with failures."
	}
	
}
def getFileNames(projectFolder,packageBuildNumber){
	def manifestFiles = findFiles(glob: '**/'+projectFolder+'/*/target/**'+ARProduct_Manifest)
	def returnAllFiles=''
	if(manifestFiles){
		for(int festIndex=0;festIndex<manifestFiles.size();festIndex++){
		    def productPath=manifestFiles[festIndex].path.replaceAll(ARProduct_Manifest,'')
			echo "product package path: "+productPath.replaceAll('/src','')
			def version_APRroduct_Pacakge=getVersionOfARProductFromManifest(manifestFiles[festIndex].path)
			def files = findFiles(glob: productPath+'/*'+version_APRroduct_Pacakge+'*') 
			
			files.each{returnAllFiles=returnAllFiles+it.name+':'}
			
			println returnAllFiles
		}
	}else{
	    error "there is no packages, generated with failures."
	}
	returnAllFiles=returnAllFiles[0..returnAllFiles.length()-2]
	return returnAllFiles
}

def triggerOtherJob(projectFolder,packageBuildNumber){
	println "run job b......"
	//def productVersionFolder=getProductVersionFolder(projectFolder)
	def productVersionFolder='2.33.0'
	def S3_DOWNPATH='arproduct/'+projectFolder+'/CandidateReleases/'+productVersionFolder+'/'+packageBuildNumber+'/'
	def S3_BUCKET=getSomeProperties(projectFolder,'s3.bucket')
	def WORKSPACE='adbc'
	//def DOWNLOADFILENAMES=getFileNames(projectFolder,packageBuildNumber)
	def DOWNLOADFILENAMES='CE_MAS_v3.0.1-b43.zip:CE_MAS_v3.0.1-b43_sign.lrm:MAS_v2.33.0-b43.zip:MAS_v2.33.0-b43_sign.lrm'
	jobB = build job: 'test_trigger_b', parameters: [string(name: 'TEST_WORKSPACE', value: "$WORKSPACE"), string(name: 'S3BUCKET', value: "$S3_BUCKET"), string(name: 'S3DOWNPATH', value: "$S3_DOWNPATH"), string(name: 'DOWNLOADFILENAMES', value: "$DOWNLOADFILENAMES")]
	println jobB.getResult()
}