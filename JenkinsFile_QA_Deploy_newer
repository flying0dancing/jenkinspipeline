#!groovy
pipeline{
    agent { label 'PRODUCT-CI-TEST' }
    stages{
        stage("parallel test"){
            steps{
                checkoutTestARProduct('test-hkma','hkma','feature/ci')
                testParallel('hkma')
                
            }
        }
    }
}

String createDisplayHeadline(String content,String headsize){
	return updateBuild("""<h${headsize} style='margin-bottom:5px'>${content}</h${headsize}>""")
}
String createDisplayStartOl(){
	return updateBuild(""" <ol> """)
}
String createDisplayStepline(String content){
	return updateBuild(""" <li>${content}</li> """)
}
String createDisplayEndOl(){
	return updateBuild(""" </ol> """)
}
def updateBuild(htmlStr){
    currentBuild.description=(currentBuild.description?currentBuild.description:'')+htmlStr
}
def testParallel(projectFolder){
    def branches=[:]
    MAX_CONCURRENT = 2
    //create a fifo
    latch = new java.util.concurrent.LinkedBlockingDeque(MAX_CONCURRENT)
    //put resource in fifo
    for(int i=0; i<MAX_CONCURRENT; i++)
    {latch.offer("$i")}
    //def job_list = ["test1","test2","test3","test4","test5","test6"]
    def job_list=getSubFolders(projectFolder)
                    
    for(int i=0; i<job_list.size(); i++) {
        def name = job_list[i]
        branches[name] = {
            def thing = null
            waitUntil {
                thing = latch.pollFirst();
                return thing != null;
            }
            try {
                //execute job
                //build(job: name, propagate: false)
                echoName(name)
				//TODO backup environment and database
                installersJson(projectFolder,name)
				//TODO clean downloadPath
            }finally {
                //release a resource
                latch.offer(thing)
            }
        }
    }
    parallel branches
}


def echoName(String name){
    echo "execute: ${name}......."
}

void checkoutTestARProduct(repoFolder,projectFolder,branch){
    checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "${projectFolder}"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: "ssh://git@bitbucket.lombardrisk.com:7999/cprod/${repoFolder}.git"]]])
}

def getSubFolders(projectFolder){
    def allFolders=[]
    dir(projectFolder+'/src/main/resources'){
        allFolders=sh(returnStdout: true, script: '''ls -l|grep "^d"|awk '{ print $NF }' ''').trim().split()
        echo "all subfolders: ${allFolders}"
    }
    allFolders=getValidFolders(allFolders)
    
    return allFolders
}

def getValidFolders(folders){
    def allFolders=[]
    for(int i=0;i<folders.size();i++){
        if(findFiles(glob: '**/'+folders[i]+'/deployment.json')){
            allFolders+=folders[i]
        }
    }
    echo "valid folders: ${allFolders}"
    return allFolders
}

def installersJson(projectFolder,deployFolder){
	
    def jsonFileName='deployment.json'
    def propertiesFileName='env.properties'
	def files=findFiles(glob: '**/'+projectFolder+'/**/'+deployFolder+'/'+jsonFileName)
    def propertiesFiles=findFiles(glob: '**/'+projectFolder+'/**/'+deployFolder+'/'+propertiesFileName)
    
	def gado
	def installers
	def installOcelotPath
	def installPrefix
	gado=readJSON file: files[0].path
		installers=gado.installers
		if(installers){
			createDisplayHeadline('Install Ocelot and Products','3')
			for(int i=0;i<installers.size();i++){
				installPrefix=installers[i].prefix
				
                if(installPrefix.equalsIgnoreCase('AgileREPORTER')){
					installers[i].prefix='AgileREPORTER'
					findAROcelot(installers[i],projectFolder,propertiesFiles[0])
				}else{
					findARProduct(installers[i],projectFolder,propertiesFiles[0])
				}
					
			}
		}else{
			error "canot found intsall products in gado.json"
		}
	
}

def getInstallerMainVersion(installVer){
    if(installVer==null || installVer.equalsIgnoreCase('LATEST')){
        installVer=''
    }else{
        if(installVer.contains('-b')){
            installVer=installVer[0..installVer.indexOf('-b')-1]
        }
		if(installVer.toUpperCase().contains('-SNAPSHOT')){
			installVer=installVer[0..installVer.indexOf('-SNAPSHOT')-1]
		}
    }
    return installVer
}

def getInstallerBuildNumber(installVer){
    def buildNumber
    if(installVer!=null && !installVer.equals('')){
		if(installVer.contains('-b')){
            buildNumber=installVer[installVer.indexOf('b')..-1]
        }
		if(installVer.toUpperCase().contains('-SNAPSHOT')){
			buildNumber='SNAPSHOT'
		}
    }
    return buildNumber
}

def getInstallerRealBuildNumber(downloadFileName,buildNumber){
    if(downloadFileName){
		if(buildNumber.indexOf('-b')!=-1){
			buildNumber=downloadFileName[downloadFileName.indexOf('b')..-5]
		}
        if(buildNumber.indexOf('-SNAPSHOT')!=-1){
			buildNumber='SNAPSHOT'
		}
	    if(buildNumber.indexOf('_sign')!=-1){
		    buildNumber=buildNumber[0..buildNumber.indexOf('_sign')-1]
	    }
    }
    return buildNumber
}
def getFileName(downloadFileFullName){
	def downloadFileName
	if(downloadFileFullName && downloadFileFullName.contains('/')){
		downloadFileName=downloadFileFullName[downloadFileFullName.lastIndexOf('/')+1]
	}
	return downloadFileName
}
def findAROcelot(ocelotInstaller,projectFolder,propertiesFileFullName){
    def installVer=ocelotInstaller.version
	createDisplayHeadline(' * ['+ocelotInstaller.prefix+', '+installVer+']','4')
	createDisplayStartOl()
    if(!ocelotInstaller.needInstall || !ocelotInstaller.needInstall.equalsIgnoreCase("no")){
		echo 'install '+ocelotInstaller.prefix+'...'
        def downloadFileFullName=searchLatestOcelot(propertiesFileFullName,ocelotInstaller.prefix,getInstallerMainVersion(installVer),getInstallerBuildNumber(installVer))
		def downloadFileName=getFileName(downloadFileFullName)
		if(downloadFileName){
			//InstallerCheck and installOcelot
			def flag=remoteInstallercheck(propertiesFileFullName,downloadFileName)
			if(flag==0){
				createDisplayStepline('install ocelot: '+downloadFileName)
				def props=ocelotInstaller.props
				if(props){
					echo props[0].filename
					opAROcelot(projectFolder,propertiesFileFullName,downloadFileFullName,downloadFileName,props[0].filename)
				}
			}else{
				echo "no need to install ["+ocelotInstaller.prefix+", "+installVer+" ]"
				createDisplayStepline('install ocelot: no need, skip')
			}
		}else{
			echo "cannot find install ocelot["+ocelotInstaller.prefix+", "+installVer+" ]"
			createDisplayStepline('install ocelot: cannot find, skip')
		}
		
	}else{
		echo "no need to install ["+ocelotInstaller.prefix+", "+installVer+" ]"
		createDisplayStepline('install ocelot: no need, skip')
	}
	createDisplayEndOl()
}

def findARProduct(productInstaller,projectFolder,propertiesFileFullName){
    def installVer=productInstaller.version
    def buildNumber=getInstallerBuildNumber(installVer)
	def downloadFileFullName
    def downloadFileName
	createDisplayHeadline(' * ['+productInstaller.prefix+', '+installVer+']','4')
	createDisplayStartOl()
    if(!productInstaller.needInstall || !productInstaller.needInstall.equalsIgnoreCase("no")){
		echo 'install Product '+productInstaller.prefix+'...'
		installVer=getInstallerMainVersion(installVer)
        downloadFileFullName=searchLatestProduct(projectFolder,propertiesFileFullName,productInstaller.prefix.toUpperCase(),installVer,buildNumber)
		downloadFileName=getFileName(downloadFileFullName)
		if(downloadFileName){
			def flag=remoteInstallercheck(propertiesFileFullName,downloadFileName)
			if(flag==0){
				createDisplayStepline('install product: '+downloadFileName)
				installARProduct(projectFolder,propertiesFileFullName,downloadFileFullName,downloadFileName)
			}else{
				echo "no need to install product ["+productInstaller.prefix+", "+installVer+" ]"
				createDisplayStepline('install product: no need, skip')
			}
		}else{
			echo "cannot find install product ["+productInstaller.prefix+", "+installVer+" ]"
			createDisplayStepline('install product: cannot find, skip')
		}
		
		
	}else{
		echo "no need to install product ["+productInstaller.prefix+", "+installVer+" ]"
		createDisplayStepline('install product: no need, skip')
	}
    
    buildNumber=getInstallerRealBuildNumber(downloadFileName,buildNumber)
    def props=productInstaller.props
	if(props){
		for(int j=0;j<props.size();j++){
			echo "=================================config index[${j}]============================================"
			if(!props[j].needConfig || !props[j].needConfig.equalsIgnoreCase("no")){
				def eaFlag='1'
                if(props[j].REPORTERMetadata.equalsIgnoreCase("yes")){
                    echo "config REPORTER metadata ${props[j]}"
					createDisplayStepline('config '+props[j])
                }else{
                    echo "config PRODUCT ${props[j]}"
					createDisplayStepline('config '+props[j])
					eaFlag='2'
                }
				linkARprojectDID(projectFolder,propertiesFileFullName,productInstaller.prefix,installVer+'-'+buildNumber,props[j].filename,props[j].aliases,eaFlag)
            }else{
                echo "no need to config ${props[j]}"
				createDisplayStepline('config '+props[j]+': no need, skip')
            }
		}
	}

	createDisplayEndOl()
						
}

/**search installer from s3
* @s3repo: test.properties, get property s3.bucket, local.linux from it
* @projectFolder like hkma, mas
* @propertiesFileFullName: test.properties, get property s3.bucket, local.linux from it
* @productPrefixAndVersion like CE_DPB_v1.0.0-b9_sign.lrm's CE_DPB_v1.0.0
* @buildNumber: like CE_DPB_v1.0.0-b9_sign.lrm's b9
* @productSuffix: .lrm .jar
*/
String searchLatestFromS3(s3repo,propertiesFileFullName,productPrefixAndVersion,buildNumber,productSuffix){
	def downloadFileName
	def downfiles
	def s3_bucket=getSomeProperties(propertiesFileFullName,'s3.bucket')
	withAWS(credentials: 'aws') {
		if(buildNumber){
			downfiles=s3FindFiles(bucket:s3_bucket, path:s3repo, glob:"**/${productPrefixAndVersion}*${buildNumber}*${productSuffix}")
		}else{
			downfiles=s3FindFiles(bucket:s3_bucket, path:s3repo, glob:"**/${productPrefixAndVersion}*${productSuffix}")
		}
		
    }
	if(downfiles){
		//downfiles.each{print "${it.name},${it.path},${it.length},${it.lastModified}"}
		def lastIndex=0
		def lastBuildNumber=downfiles[0].lastModified
		downloadFileName=downfiles[0].name
		for(int index=0;index<downfiles.size();index++){
			if(lastBuildNumber<downfiles[index].lastModified){
				lastBuildNumber=downfiles[index].lastModified
				lastIndex=index
				downloadFileName=downfiles[index].name
			}
		}
	}
	echo "Latest installer name "+downloadFileName
	return downloadFileName
}
String searchLatestProduct(projectFolder,propertiesFileFullName,productPrefix,productVersion,buildNumber){
	def downloadFromLocalServer=getSomeProperties(propertiesFileFullName,'default.use.repo')
	def downloadFileName
	def repo
	if(!downloadFromLocalServer || downloadFromLocalServer.equalsIgnoreCase('local')){
		repo=getSomeProperties(propertiesFileFullName,'product.local.repo')
		downloadFileName=searchLatestFromLocal(repo,propertiesFileFullName,productPrefix+'_v'+productVersion,buildNumber,'.lrm')
	}else{
		repo='arproduct/'+projectFolder+'/CandidateReleases/'
		downloadFileName=searchLatestFromS3(repo,propertiesFileFullName,productPrefix+'_v'+productVersion,buildNumber,'.lrm')
		if(!downloadFileName){
			repo='arproduct/'+productPrefix.toLowerCase()+'/CandidateReleases/'
			downloadFileName=searchLatestFromS3(repo,propertiesFileFullName,productPrefix+'_v'+productVersion,buildNumber,'.lrm')
		}
	}
	
	return downloadFileName
}

String searchLatestOcelot(propertiesFileFullName,productPrefix,productVersion,buildNumber){
	def downloadFromLocalServer=getSomeProperties(propertiesFileFullName,'default.use.repo')
	def downloadFileName
	def repo
	if(!downloadFromLocalServer || downloadFromLocalServer.equalsIgnoreCase('local')){
		repo=getSomeProperties(propertiesFileFullName,'ar.local.repo')
		downloadFileName=searchLatestFromLocal(repo,propertiesFileFullName,productPrefix+'-'+productVersion,buildNumber,'.jar')
	}else{
		repo='AgileREPORTER/Releases/CandidateReleases/'
		downloadFileName=searchLatestFromS3(repo,propertiesFileFullName,productPrefix+'-'+productVersion,buildNumber,'.jar')
	}
	
	return 
}

String searchLatestFromLocal(localRepo,propertiesFileFullName,productPrefixAndVersion,buildNumber,productSuffix){
	def local_linux=getSomeProperties(propertiesFileFullName,'app.host')
	def app_user=getSomeProperties(propertiesFileFullName,'app.user')
	def app_hostuser=app_user+'@'+local_linux
	def searchContent
	if(buildNumber){
		searchContent=productPrefixAndVersion+'*'+buildNumber+'*'+productSuffix
	}else{
		searchContent=productPrefixAndVersion+'*'+productSuffix
	}
	def flag=sh( returnStdout: true, script: '''ssh '''+app_hostuser+'''  'find '''+localRepo+''' -iname '''+searchContent+''' -print0|xargs -0 stat -c'%Y:%n'|sort -nr|cut -d ':' -f 2|head -n 1' ''')
    return flag
}
/**download installer from s3
* @s3repo: test.properties, get property s3.bucket, local.linux from it
* @projectFolder like hkma, mas
* @propertiesFileFullName: test.properties, get property s3.bucket, local.linux from it
* @downloadFileName like CE_DPB_v1.0.0-b9_sign.lrm under <projectFolder>/candidate-release/<productVersionFolder>/
* @downloadPath: local path, download in local.linux
*/
void downloadFromS3(s3repo,propertiesFileFullName,downloadFileName,downloadPath){
	def downfiles
	def local_linux=getSomeProperties(propertiesFileFullName,'app.host')
	def app_user=getSomeProperties(propertiesFileFullName,'app.user')
	def app_hostuser=app_user+'@'+local_linux
	def s3_bucket=getSomeProperties(propertiesFileFullName,'s3.bucket')
	withAWS(credentials: 'aws') {
		downfiles=s3FindFiles(bucket:s3_bucket, path:s3repo, glob:"**/${downloadFileName}")
        //downfiles.each{print "${it.name},${it.path},${it.length},${it.lastModified}"}
    }
    if(downfiles){
		def lastIndex=0
		withAWS(credentials: 'aws') {
            s3Download(bucket:s3_bucket, path:s3repo+downfiles[lastIndex].path,file:downfiles[lastIndex].path,force:true)
        }
        def status=sh( returnStatus: true, script: 'scp '+downfiles[lastIndex].path+' '+app_hostuser+':'+downloadPath)
        echo "downloaded Agile Reporter Product completely."
		
    }else{
	    error "there is no packages existed in bucket server, name like ${downloadFileName}"
	}
	
}

void downloadOcelot(propertiesFileFullName,downloadFileName,downloadPath){
	def s3_ar_repo='AgileREPORTER/Releases/CandidateReleases/'
    downloadFromS3(s3_ar_repo,propertiesFileFullName,downloadFileName,downloadPath)
}

void downloadARProduct(projectFolder,propertiesFileFullName,downloadFileName,downloadPath){
	def s3_ar_repo='arproduct/'+projectFolder+'/CandidateReleases/'
    downloadFromS3(s3_ar_repo,propertiesFileFullName,downloadFileName,downloadPath)
}


String getSomeProperties(propFile,keystr){
	def files =findFiles(glob: '**/'+propFile)
	def returnValue=''
	def props
	for(int index=0;index<files.size();index++){
		props = readProperties interpolate: true, file: files[index].path
		props.each{
			if(it.key==keystr){
				//println(it.key + " = " + it.value)
				returnValue=it.value
				return returnValue
			}
		}
	}
	return returnValue
}

int remoteInstallercheck(propertiesFileFullName,installerName){
    def ocelotPath=getSomeProperties(propertiesFileFullName,'app.install.path')
	def local_linux=getSomeProperties(propertiesFileFullName,'app.host')
	def app_user=getSomeProperties(propertiesFileFullName,'app.user')
	def app_hostuser=app_user+'@'+local_linux
	
	def flag=sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteProductInstallerCheck.sh '''+ocelotPath+''' '''+installerName+''' ' ''')
    return flag
} 

/***
*install arproduct packages part, if RemoteInstall_0.tmp contains fail, it will terminate.
* @projectFolder like hkma, mas
* @propertiesFileFullName: test.properties, get property local.linux local.oracle ar.repo.linux from it
* @downloadFileName like CE_DPB_v1.0.0-b9_sign.lrm under <projectFolder>/candidate-release/<productVersionFolder>/
* @downloadFromLocalServer: null means download from remote
* @ocelotPath: install path
*/
void installARProduct(projectFolder,propertiesFileFullName,installerFullName,installerName){
	def local_linux=getSomeProperties(propertiesFileFullName,'app.host')
	def app_user=getSomeProperties(propertiesFileFullName,'app.user')
	
	def stepInfo='download product package'
	def app_hostuser=app_user+'@'+local_linux
	def ocelotPath=getSomeProperties(propertiesFileFullName,'app.install.path')
	def downloadPath=ocelotPath+'/deploys/'

	//create download folder deploys
	sh( returnStatus: true, script: '''ssh '''+app_hostuser+''' 'mkdir '''+downloadPath+''' 2>/dev/null ' ''')
	if(installerFullName && installerFullName.contains('/')){
		//download from local server
		createDisplayStepline(stepInfo+' from local')
	}else{
		createDisplayStepline(stepInfo+' from remote')
		downloadARProduct(projectFolder,propertiesFileFullName,installerName,downloadPath)
		installerFullName=downloadPath+installerName
	}
	sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh -help' ''')
	//sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh '''+ocelotPath+''' 1 '''+installerFullName+''' ' ''')
	def allstatus=sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'cat '''+ocelotPath+'''/RemoteInstall_1.tmp ' ''').trim()
	if(allstatus){
		createDisplayStepline(allstatus)
		if(allstatus.contains('fail')){
			createDisplayEndOl()
			error "install or upgrade product contains fail."
		}else{
			echo "install or upgrade product pass."
		}
	}
}

/***
*config DID part, arguments: projectName, productPrefix, DID's properties's name suffix like 'aliasinfo.properties' 
* @projectFolder like hkma, mas
* @propertiesFileFullName: test.properties, get property local.linux local.oracle ar.repo.linux from it
* @productPrefix like CE_DPB_v1.0.0-b9_sign.lrm's CE_DPB
* @productVersion like CE_DPB_v1.0.0-b9_sign.lrm's 1.0.0-b9
* @productPropFileName: ce config properties
* @productPropAliases: like "STB Work:STB System:STB System HKMA"
* @eaFlag: 1 means config argument is -ea, 2 means config argument is -da and -aa
*/
def linkARprojectDID(projectFolder,propertiesFileFullName,productPrefix,productVersion,productPropFileName,productPropAliases,eaFlag){
	def continue_status1='RemoteInstall_'+eaFlag+'.tmp'
	def local_linux=getSomeProperties(propertiesFileFullName,'app.host')
	def app_user=getSomeProperties(propertiesFileFullName,'app.user')
	def app_hostuser=app_user+'@'+local_linux
	def ocelotPath=getSomeProperties(propertiesFileFullName,'app.install.path')
	def downloadPath=ocelotPath+'/bin/'
	
	//copy aliasinfo.properties to local ocelot folder
	stepInfo='find and copy '+productPropFileName
	flag=sh( returnStatus: true, script: '''scp `find '''+env.WORKSPACE+'''/'''+projectFolder+'''/src/main/resources/properties/ -type f -name "'''+productPropFileName+'''"` '''+app_hostuser+''':'''+downloadPath)
	if(flag==0){
		createDisplayStepline(stepInfo+' pass')
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh '''+ocelotPath+''' '''+eaFlag+''' '''+productPropFileName+''' '''+productPrefix.toUpperCase()+''' '''+ productVersion+''' \"'''+productPropAliases+'''\" ' ''')
		def allstatus=sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'cat '''+ocelotPath+'''/'''+continue_status1+''' ' ''').trim()
		if(allstatus){
			createDisplayStepline('config DID: '+allstatus.replaceAll('configure','<br />configure'))
			if(allstatus.contains('fail')){
				createDisplayEndOl()
				error "config properties contains fail."
			}else{
				echo "config properties pass."
			}
		}
	}else{
		createDisplayStepline(stepInfo+' fail')
		createDisplayEndOl()
		error "fail to copy properties file from slave"
	}
	
}


String getAROcelotProperty(propFile,keystr){
	def files =findFiles(glob: '**/'+propFile)
	def returnValue=''
	def props
	for(int index=0;index<files.size();index++){
		props = readProperties interpolate: true, file: files[index].path
		props.each{
			if(it.key==keystr){
				println(it.key + " = " + it.value)
				returnValue=it.value
				return returnValue
			}
		}
	}
	return returnValue
}


/***
*new install or upgrade ar platform part, use @ocelotPropFileName ocelot.user.password= to judged new install or upgrade
* @projectFolder like hkma, mas
* @propertiesFileFullName: env.properties, get property app.host app.user default.use.repo database.driver database.host database.user ar.local.repo from it
* @installerName: like AgileREPORTER-19.3.0-b207.jar
* @ocelotPropFileName: ocelot properties's name like 'hkma_upgrade_ocelot.properties' 'hkma_new_ocelot.properties'
*/
void opAROcelot(projectFolder,propertiesFileFullName,installerFullName,installerName,ocelotPropFileName){
	def local_linux=getSomeProperties(propertiesFileFullName,'app.host')
	def app_user=getSomeProperties(propertiesFileFullName,'app.user')

	def app_hostuser=app_user+'@'+local_linux
	def ocelotPath=getSomeProperties(propertiesFileFullName,'app.install.path')
	def downloadPath=ocelotPath+'/deploys/'

	//transfer ocelot properties to workspace for getting properties
	def ocelotPropFilePath=env.WORKSPACE+'/'+projectFolder+'/src/main/resources/properties/'
	def ocleot_user_password=getAROcelotProperty(ocelotPropFilePath+ocelotPropFileName,'ocelot.user.password')
	//def ocelotPath=getAROcelotProperty(ocelotPropFileName,'ocelot.install.path')
	sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'mkdir '''+downloadPath+''' 2>/dev/null ' ''')
	if(ocleot_user_password){
		createDisplayStepline('new install')
		echo "new install agile reporter platform"
		def dbserver_user=getSomeProperties(propertiesFileFullName,'database.user')
		def dbserver_host=getSomeProperties(propertiesFileFullName,'database.host')
		def dbserver_hostuser=dbserver_user+'@'+dbserver_host
		def local_dbname=getAROcelotProperty(ocelotPropFilePath+ocelotPropFileName,'ocelot.jdbc.username')
		def local_dbinstance=getAROcelotProperty(ocelotPropFilePath+ocelotPropFileName,'ocelot.jdbc.url')
		def jdbcurlarr=local_dbinstance.split(':')
		local_dbinstance=jdbcurlarr[-1]
		echo "create oracle database"
		createDisplayStepline('create oracle database')
		sh( returnStatus: true, script: '''ssh '''+dbserver_hostuser+'''  './opSchema.sh '''+local_dbinstance+''' '''+local_dbname+''' ' ''')
		
		createDisplayStepline('create ocelot install path')
		echo "create ocelot install path"
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'rm -rf '''+ocelotPath+''' ' ''')
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'mkdir '''+ocelotPath+''' ' ''')
	}else{
		echo "upgrade agile reporter platform"
		createDisplayStepline('upgrade install')
	}


	//copy ocelot.properties to local ocelot folder
	def stepInfo='find and copy '+ocelotPropFileName
	def flag=sh( returnStatus: true, script: '''scp `find '''+env.WORKSPACE+'''/'''+projectFolder+'''/src/main/resources/properties/ -type f -name "'''+ocelotPropFileName+'''"` '''+app_hostuser+''':'''+downloadPath)
	if(flag==0){
		createDisplayStepline(stepInfo+' pass')
		stepInfo='download ocelot '
		if(installerFullName && installerFullName.contains('/')){
			createDisplayStepline(stepInfo+'from local')
		}else{
			//download from remote server
			createDisplayStepline(stepInfo+'from remote')
			downloadOcelot(propertiesFileFullName,installerName,downloadPath)
			installerFullName=downloadPath+installerName
		}
		sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh -help' ''')
		//sh( returnStatus: true, script: '''ssh '''+app_hostuser+'''  'sh RemoteInstall.sh '''+ocelotPath+''' 0 '''+installerFullName+''' '''+downloadPath+ocelotPropFileName+''' ' ''')
		def allstatus=sh(returnStdout: true, script: '''ssh '''+app_hostuser+''' 'cat '''+ocelotPath+'''/RemoteInstall_0.tmp ' ''').trim()
		if(allstatus){
			createDisplayStepline(allstatus)
			if(allstatus.contains('fail')){
				createDisplayEndOl()
				error "install or upgrade ocelot contains fail."
			}else{
				echo "install or upgrade ocelot pass."
			}
		}
	}else{
		createDisplayStepline(stepInfo+' fail')
		createDisplayEndOl()
		error "fail to copy properties file from slave"
	}
	
}