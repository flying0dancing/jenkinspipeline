#!groovy
ARProject_Prefix=getprojectFolder(env.JOB_NAME)
ARProject_Properties='package.properties'
ARProduct_Manifest='/src/manifest.xml'
pipeline {
    agent { label 'SHA-AR-PRODUCT-CI-TEST' }
    options {
        timeout(time: 60, unit: 'MINUTES') 
    }
    
    stages {
        stage('checkout'){
			steps{
				echo "start job ${JOB_URL}"
				echo "branch number: ${env.BUILD_NUMBER}"
				checkoutARProduct(ARProject_Prefix)
			}
		}
		stage('validate'){
			steps{
				echo "validate metadata before package product config"
			}
		}
		stage('build package'){
			steps{
				packageARProduct(ARProject_Prefix,env.BUILD_NUMBER)
			}
		}
    }
}


String getSomeProperties(projectFolder,keystr){
	def files =findFiles(glob: '**/'+projectFolder+'/'+ARProject_Properties)
	def returnValue=''
	def props
	for(int index=0;index<files.size();index++){
		props = readProperties interpolate: true, file: files[index].path
		props.each{
			if(it.key==keystr){
				//println(it.key + " = " + it.value)
				returnValue=it.value
				return returnValue
			}
		}
	}
	return returnValue
}

def getExternalProjsFromJson(projectFolder){
	def files =findFiles(glob: '**/'+projectFolder+'/testudo.json')
	def returnArr=[]
	def cisettings
	def zipset
	def externalProjs
	for(int index=0;index<files.size();index++){
		cisettings = readJSON file: files[index].path
		for(int i=0;i<cisettings.size();i++){
			zipset=cisettings[i].zipSettings
			if(zipset){
			    //println(zipset)
				externalProjs=zipset.externalProjects
				if(externalProjs){
					for(int j=0;j<externalProjs.size();j++){
						def flag=returnArr.find{it->it==externalProjs[j].project}
						//println("${externalProjs[j].project}")
						if(!flag){
							returnArr+=externalProjs[j].project
						}
						
				 	}
				}
				
			}
			
		}
	}
	println "external projects:${returnArr}"
	return returnArr
}

String getprojectFolder(jobName){
    return jobName[0..jobName.indexOf("_")-1]
}

String getProductVersionFolder(projectName){
    def version_APRroduct_Pacakge = sh (
        script: '''awk -F '[<>]' /implementationVersion/'{print $3}' '''+projectName+'''/'''+projectName+ARProduct_Manifest,
        returnStdout: true
        ).trim()
	def versionPattern='(\\d+\\.){2,}\\d+'
	def versionMatcher=(version_APRroduct_Pacakge=~versionPattern)
	versionMatcher.matches()
	assert version_APRroduct_Pacakge=~versionPattern
	version_APRroduct_Pacakge=''+versionMatcher[0][0]
	versionMatcher=null
    echo "main version of ar product pacakge: ${version_APRroduct_Pacakge}"
	return version_APRroduct_Pacakge
}

String getVersionOfARProductFromManifest(manifestFullPath){
    def version_APRroduct_Pacakge = sh (
        script: '''awk -F '[<>]' /implementationVersion/'{print $3}' '''+manifestFullPath,
        returnStdout: true
        ).trim()
    echo "version of ar product pacakge: ${version_APRroduct_Pacakge}"
	return version_APRroduct_Pacakge
}

/**
* package all products in projectFolder, packageBuildNumber like b1,b2,b3...,b290,..
*/
void packageARProduct(projectFolder,packageBuildNumber){
    def productVersionFolder
    sh (
        '''
			cd ci-script
			java -jar testudo.jar -Dproject='''+projectFolder+''' -Did=* -Dproc=2 -DrunOnJenkins -Drelease='''+packageBuildNumber+'''
		'''
        )
	
	productVersionFolder=getProductVersionFolder(projectFolder)
	def s3_bucket=getSomeProperties(projectFolder,'s3.bucket')
	def local_linux=getSomeProperties(projectFolder,'local.linux')
	def arproduct_repo_linux=getSomeProperties(projectFolder,'arproduct.repo.linux')+projectFolder+'/candidate-release/'
	def manifestFiles = findFiles(glob: '**/'+projectFolder+'/*'+ARProduct_Manifest) 
	productVersionFolder=productVersionFolder+'/'+packageBuildNumber
	if(manifestFiles.size()>0){
		for(int festIndex=0;festIndex<manifestFiles.size();festIndex++){
		    def productPath=manifestFiles[festIndex].path.replaceAll(ARProduct_Manifest,'')
			def productName=productPath.replaceAll(projectFolder+'/','')
			echo "product name(prefix): ${productName}"
			def version_APRroduct_Pacakge=getVersionOfARProductFromManifest(manifestFiles[festIndex].path)
			def files = findFiles(glob: productPath+'/*'+version_APRroduct_Pacakge+'*') 
			if(local_linux){
				sh( returnStatus: true, script: '''ssh '''+local_linux+'''  'mkdir -p '''+arproduct_repo_linux+productVersionFolder+'''' ''')
				for(int index=0;index<files.size();index++){
	            	echo "transfer ${files[index].name} to folder $productVersionFolder"
	            	def fileExisted=sh(returnStdout: true, script: '''ssh '''+local_linux+''' '[ -e '''+arproduct_repo_linux+productVersionFolder+'/'+files[index].name+''' ]; echo $?' ''').trim()
	            	if(fileExisted=='0'){
	                	echo "Agile Reporter Product Package already exists.No need to download again."
	            	}else{
	                	sh( returnStatus: true, script: 'scp '+files[index].path+' '+local_linux+':'+arproduct_repo_linux+productVersionFolder+'/'+files[index].name)
	            	}
	        	}
			}
	        //files.each{sh( returnStatus: true, script: 'scp '+it.path+' '+local_linux+':'+arproduct_repo_linux+productVersionFolder+'/'+it.name)}
            withAWS(credentials: 'aws') {
                //echo """${files[0].name}, ${files[0].path}, ${files[0].directory}, ${files[0].length}, ${files[0].lastModified}"""
                files.each{s3Upload( bucket:s3_bucket, path:"arproduct/${projectFolder}/CandidateReleases/${productVersionFolder}/${it.name}",includePathPattern:"${it.path}")}
            }
		}
	}else{
	    error "there is no packages, generated with failures."
	}
}

void checkoutARProduct(projectFolder){
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "${projectFolder}"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: "ssh://git@bitbucket.lombardrisk.com:7999/cprod/${projectFolder}.git"]]])
           
    //checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'ci-script']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: 'ssh://git@bitbucket.lombardrisk.com:7999/cprod/ci-script.git']]])
	def externalProjs=getExternalProjsFromJson(projectFolder)
	if(externalProjs){
		for(int i=0;i<externalProjs.size();i++){
			checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "${projectFolder}xbrl"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '46afdff1-cdd3-4098-b8af-d904b4d298aa', url: "ssh://git@bitbucket.lombardrisk.com:7999/cprod/${externalProjs[i]}.git"]]])
		}
	}
}

void downloadARInstaller(projectFolder){
    def downfiles
   
    def arInstallerVersion = getSomeProperties(projectFolder,'ar.installer.version')
    def s3_bucket=getSomeProperties(projectFolder,'s3.bucket')
	def local_linux=getSomeProperties(projectFolder,'local.linux')
	def ar_repo_linux=getSomeProperties(projectFolder,'ar.repo.linux')
	def s3_ar_repo='AgileREPORTER/Releases/CandidateReleases/'
    withAWS(credentials: 'aws') {
        downfiles=s3FindFiles(bucket:s3_bucket, path:s3_ar_repo, glob:"**/AgileREPORTER-${arInstallerVersion}.jar")
        //downfiles.each{print "${it.name},${it.path},${it.length},${it.lastModified}"}
    }
    if(downfiles.size()>0){
        def ar_path=downfiles[0].path[0..downfiles[0].path.indexOf(downfiles[0].name)-1]
	
	    sh( returnStatus: true, script: '''ssh '''+local_linux+'''  'mkdir -p '''+ar_repo_linux+ar_path+'''' ''')
	    def jarExisted=sh(returnStdout: true, script: '''ssh '''+local_linux+''' '[ -e '''+ar_repo_linux+downfiles[0].path+''' ]; echo $?' ''').trim()

        if(jarExisted=='0'){//existed
            echo "Agile Reporter jar already exists.No need to download again."
        }else{
            withAWS(credentials: 'aws') {
                s3Download(bucket:s3_bucket, path:s3_ar_repo+downfiles[0].path,file:downfiles[0].path,force:true)
            }
            def status=sh( returnStatus: true, script: 'scp '+downfiles[0].path+' '+local_linux+':'+ar_repo_linux+ar_path)
            echo "downloaded Agile Reporter jar completely."
    }
    }else{
	    echo "there is no packages existed in bucket server, please check your ar.installer.version in ${ARProject_Properties}."
	}
	
}
